public class Main{

    public static void main(String[] args){


      LinkedList list1=new LinkedList();
              list1.add(2);
              list1.add(4);
              list1.add(5);
              LinkedList list2=new LinkedList();
              list2.add(1);
              list2.add(6);

              listTrier=Fusion.fusionTrier(list1, list2
   }
   
}






package com.company;

import java.util.LinkedList;

public class Fusion extends Main {

    LinkedList <Object> linkedlist= new LinkedList<>();


    public static /*static void*/ LinkedList  decomposition(LinkedList list){

        int length= list.size();

        int i = length / 2;                    // ---------- Début boucle initialisation des branches (listes chaînés)
       // System.out.println("i="+i);

        LinkedList arbreTrier= new LinkedList();
        if(i==0) {
            return list;//retourne une branche
        }

        else{
        // ----- Initialisation
        LinkedList rightlist = new LinkedList();
        LinkedList leftlist = new LinkedList();


        for (int n = 0; n!=length; ++n) {          //parcourt la liste
            if (n < i)                            // ---------- Copie des valeurs de la sequence au branches
                rightlist.add(list.poll());
            else{
                leftlist.add(list.poll());
             //   System.out.println(" - leftlist ="+leftlist.get(n-i));
                }
        }

                                                    // --------- Initialisation des variables

           arbreTrier= fusionTrier( decomposition(rightlist),decomposition(leftlist)); //fusionne les arbes
        }
     return arbreTrier;           // retourner arbre trier
    }



  public static LinkedList fusionTrier(LinkedList <Integer> list,LinkedList <Integer> list2){
        LinkedList listTrier = new LinkedList();

       while(list.size()!= 0 && list2.size()!= 0 ) {
           if(list.get(0)<list2.get(0))
               listTrier.add(list.removeFirst());
           else
               listTrier.add(list2.removeFirst());
           System.out.println(listTrier.getLast());
       }
       if( list2.size()!= 0 && list.size()==0)
           listTrier.addAll(list2);
       else
           if( list.size()!= 0 && list2.size()==0)
                listTrier.addAll(list);
        return listTrier;
    }
